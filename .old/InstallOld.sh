# Quick install for Bandito Box. Once operational I will break into modules#------> Prepare environment#--> Setup user# Clone the root useruseradd -g root -ou 0 bandito -s /bin/zsh -d /root -c 'Cloned root account for Bandito Box'#--> Build folder structure# Create Bandito Box directoriesmkdir -p /bandito-box/.packagesmkdir -p /bandito-box/logsmkdir -p /bandito-box/.conf/sslmkdir -p /bandito-box/appsmkdir -p /bandito-box/.data/mkdir -p /bandito-box/tmpmkdir -p /bandito-box/.pids# Create mount pointsmkdir -p /mnt/usb_bandito_drivemkdir -p /mnt/usb_bandito_drive/downloadmkdir -p /mnt/usb_bandito_drive/backup#--> Load dependencies# Update apt and upgrade any out of date packagesapt-get update && apt-get upgrade -y# Install new packages & Clean up unused packagesapt-get install apt-transport-https zip unzip p7zip-full cifs-utils ntfs-3g build-essential make gcc git-core python python-dev python-pip python-qt4 python-cheetah python-crypto python-pycurl python-imaging liblept3 tesseract-ocr rhino nginx -y && apt-get autoremove -y# Install UnRARmkdir -p /bandito-box/.packages/unRAR/ && cd /bandito-box/.packages/unRAR/wget http://sourceforge.net/projects/bananapi/files/unrar_5.2.6-1.arm6_armhf.debdpkg -i unrar*.deb# Clone Git reposgit clone https://github.com/Stephen304/bitcannon /opt/BitCannongit clone https://github.com/pillone/usntssearch /opt/NZBmegasearcH#git clone git clone -branch mater --single-branch https://github.com/pyload/pyload /opt/pyLoad# Load MongoDB (for BitCannon)mkdir /opt/MongoDB && cd /opt/MongoDBwget https://github.com/brice-morin/ArduPi/blob/master/mongodb-rpi/mongo/bin/bsondump?raw=true -O bsondumpwget https://github.com/brice-morin/ArduPi/blob/master/mongodb-rpi/mongo/bin/mongo?raw=true -O mongowget https://github.com/brice-morin/ArduPi/blob/master/mongodb-rpi/mongo/bin/mongod?raw=true -O mongodwget https://github.com/brice-morin/ArduPi/blob/master/mongodb-rpi/mongo/bin/mongodump?raw=true -O mongodumpchmod +x *# Download Node.js - istall when neededmkdir -p /bandito-box/.packages/Node/ && cd /bandito-box/.packages/Node/wget http://node-arm.herokuapp.com/node_latest_armhf.deb# Download Mono - istall when neededmkdir -p /bandito-box/.packages/Mono/ && cd /bandito-box/.packages/Mono/wget http://sourceforge.net/projects/bananapi/files/mono_3.12.1-1_armhf.deb#dpkg -i /bandito-box/.packages/Mono/mono_3.12.1-1_armhf.deb# Download pyLoad - istall when neededmkdir -p /bandito-box/.packagespyLoad/ && cd /bandito-box/.packages/pyLoad/wget http://download.pyload.org/pyload-cli-v0.4.9-all.deb# Download NZBGet VideoSort script - istall when neededmkdir -p /bandito-box/.packages/VideoSort/ && cd /bandito-box/.packages/VideoSort/wget http://sourceforge.net/projects/nzbget/files/ppscripts/videosort/videosort-ppscript-5.0.zip#--> Mount drives# Update fstabecho '' >> /etc/fstabecho '# USB Download storage' >> /etc/fstabecho 'UUID=USB_DRIVE_UUID /mnt/usb_bandito_drive ntfs-3g uid=1000,gid=1000,umask=007 0 0' >> /etc/fstabecho '' >> /etc/fstabecho '# Network shares for Bandito Box' >> /etc/fstabecho "//x.x.x.x/Media /mnt/net_media_share cifs username=SHARE_USER,password=SHARE_PASSWORD,iocharset=utf8,sec=ntlm  0  0" >> /etc/fstabecho "//x.x.x.x/Backup/Applications/Bandito-Box /mnt/net_backup_share cifs username=SHARE_USER,password=SHARE_PASSWORD,iocharset=utf8,sec=ntlm  0  0" >> /etc/fstabecho '' >> /etc/fstab# mount all drives in fstabmount -a# create links to mounted drivesln -s /mnt/usb_bandito_drive/download /bandito-box/downloadln -s /mnt/usb_bandito_drive/backup /bandito-box/backup#--> Backup and repace conf filesmkdir -p /mnt/usb_bandito_drive/backup/system# motd filecd /bandito-box/tmp && mv /etc/motd /mnt/usb_bandito_drive/backup/motd.backupwget https://raw.githubusercontent.com/EZarnosky/Bandito/master/conf/etc_motdtr -d '\r' < /bandito-box/tmp/etc_motd > /etc/motd && rm /bandito-box/tmp/etc_motd# hosts filecd /bandito-box/tmp && cp /etc/hosts /mnt/usb_bandito_drive/backup/hosts.backupwget https://raw.githubusercontent.com/EZarnosky/Bandito/master/conf/etc_hoststr -d '\r' < /bandito-box/tmp/etc_hosts > /bandito-box/tmp/etc_hosts.good && cat /bandito-box/tmp/etc_hosts.good >> /etc/hostsrm /bandito-box/tmp/etc_hosts && /bandito-box/tmp/etc_hosts.good# Nginx reverse proxy filecd /bandito-box/tmp && unlink /etc/nginx/sites-enabled/defaultwget https://raw.githubusercontent.com/EZarnosky/Bandito/master/conf/etc_nginx_sites-available_reversetr -d '\r' < /bandito-box/tmp/etc_nginx_sites-available_reverse > /etc/nginx/sites-available/reverseln -s /etc/nginx/sites-available/reverse /etc/nginx/sites-enabled/reverseln -s /etc/nginx/sites-available/reverse /bandito-box/conf/reverse# Clone Bandito Box for all the conf filesgit clone https://github.com/EZarnosky/Bandito /bandito-box/apps/Bandito-Box#------> Component Installation#----> NZBGet# Build folder structure for NZBGetmkdir -p /bandito-box/download/usenetmkdir -p /bandito-box/download/usenet/dstmkdir -p /bandito-box/download/usenet/watchmkdir -p /bandito-box/download/usenet/queuemkdir -p /bandito-box/download/usenet/tmpmkdir -p /bandito-box/download/usenet/post-procmkdir -p /bandito-box/download/usenet/nzbmkdir -p /bandito-box/download/usenet/inter# Extract NZBGet Scripts$Ban_Packages/VideoSort/mkdir -p /bandito-box/apps/NZBGet/scripts && cd /bandito-box/apps/NZBGet/scriptsunzip /bandito-box/.packages/VideoSort/videosort*.zip# Add NZBGet Repogpg --recv-keys --keyserver keyserver.ubuntu.com 0E50BF67 && gpg -a --export 0E50BF67 |sudo apt-key add - && echo "deb http://packages.unusedbytes.ca wheezy main" > /etc/apt/sources.list.d/nzbget.list && apt-get update# Install NZBGetapt-get install nzbget -y# Copy conf template for usecp /usr/share/nzbget/nzbget.conf ~/.nzbget# Edit NZBGet conf filesed -i "s#MainDir=~/downloads#MainDir=/bandito-box/download/usenet#g" /root/.nzbgetsed -i 's#ScriptDir=${MainDir}/scripts#ScriptDir=/bandito-box/apps/NZBGet/scripts#g' /root/.nzbgetsed -i 's#NzbDir=${MainDir}/nzb#NzbDir=${MainDir}/watch#g' /root/.nzbgetsed -i 's#LogFile=${DestDir}/nzbget.log#LogFile=/bandito-box/logs/NZBGet.log#g' /root/.nzbgetsed -i 's#ControlUsername=nzbget#ControlUsername=bandito#g' /root/.nzbgetsed -i 's#ControlPassword=tegbzn6789#ControlPassword=bandito1#g' /root/.nzbgetsed -i 's#DaemonUsername=root#DaemonUsername=bandito#g' /root/.nzbget# Create link to Bandito Box conf folderln -s ~/.nzbget /bandito-box/conf/NZBGet.conf# Setup servicecd /bandito-box/tmpwget https://raw.githubusercontent.com/EZarnosky/Bandito/master/conf/etc_init.d_nzbgettr -d '\r' < /bandito-box/tmp/etc_init.d_nzbget > /etc/init.d/nzbgetchmod +x /etc/init.d/nzbgetupdate-rc.d nzbget defaults# Use if system do not autostart correctly#----> crontab -l | { cat; echo "@reboot nzbget -D"; } | crontab -# Start NZBGetservice nzbget start#----> Deluge# Build folder structure for NZBGetmkdir -p /bandito-box/download/torrentmkdir -p /bandito-box/download/torrent/dstmkdir -p /bandito-box/download/torrent/watchmkdir -p /bandito-box/download/torrent/queue# Install Deluge Daemon and WebUI from apt repoapt-get install deluged deluge-webui -y && apt-get autoremove -y# Configure deluge authecho "bandito:bandito1:10" > ~/.config/deluge/authln -s ~/.config/deluge/auth /bandito-box/conf/Deluge.auth.conf# Configure loggingcd /bandito-box/tmpwget https://raw.githubusercontent.com/EZarnosky/Bandito/master/conf/etc_logrotate.d_delugetr -d '\r' < /bandito-box/tmp/etc_logrotate.d_deluge > /etc/logrotate.d/deluge && /bandito-box/tmp/etc_logrotate.d_delugetouch /var/log/deluged.log && ln -s /var/log/deluged.log /bandito-box/logs/Deluge.logtouch /var/log/deluge-web.log && ln -s /var/log/deluge-web.log /bandito-box/logs/Deluge-Web.log# Configure for start at bootcd /bandito-box/tmpwget https://raw.githubusercontent.com/EZarnosky/Bandito/master/conf/etc_default_deluge-daemontr -d '\r' < /bandito-box/tmp/etc_default_deluge-daemon > /etc/default/deluge-daemon && /bandito-box/tmp/etc_default_deluge-daemoncd /bandito-box/tmpwget https://raw.githubusercontent.com/EZarnosky/Bandito/master/conf/etc_init.d_deluge-daemontr -d '\r' < /bandito-box/tmp/etc_init.d_deluge-daemon > /etc/init.d/deluge-daemon && rm /bandito-box/tmp/etc_init.d_deluge-daemonchmod +x /etc/init.d/deluge-daemon# Update the system to Deluge at startupdate-rc.d deluge-daemon defaults# Start Delugeservice deluge-daemon start#----> CouchPotatomkdir -p /bandito-box/apps/CouchPotato#look at /etc/init.d/headphones for values#CP_OPTS=" --config=/bandito-box/conf/CouchPotato.conf"#CP_DATA="/bandito-box/apps/CouchPotato"# Clone Git Repogit clone https://github.com/RuudBurger/CouchPotatoServer /opt/CouchPotato#----> SickRage# Install dependenciesapt-get install libssl-dev -y && pip install pyopenssl==0.13.1 && apt-get autoremove -ymkdir -p /bandito-box/apps/SickRage#Review for config.ini http://www.htpcguides.com/configure-sickrage-reverse-proxy-nginx/#look at /etc/init.d/sickrage for values#SR_OPTS=" --config=/bandito-box/conf/SickRage.conf"#SR_DATA=="/bandito-box/apps/SickRage"# Clone Git Repogit clone https://github.com/SiCKRAGETV/SickRage /opt/SickRage# Configure for start at bootcd /bandito-box/tmpwget https://raw.githubusercontent.com/EZarnosky/Bandito/master/conf/etc_default_sickragetr -d '\r' < /bandito-box/tmp/etc_default_sickrage > /etc/default/sickrage && rm /bandito-box/tmp/etc_default_sickragecp /opt/SickRage/runscripts/init.ubuntu /etc/init.d/sickrage && chmod +x /etc/init.d/sickrage# Update the system to SickRage at startupdate-rc.d sickrage defaults# Start SickRageservice sickrage start#----> Headphonesmkdir -p /bandito-box/apps/Headphones#look at /etc/init.d/headphones for values#HP_OPTS=" --config=/bandito-box/conf/Headphones.conf"#HP_DATA="/bandito-box/apps/Headphones"# Clone Git Repogit clone https://github.com/rembo10/headphones /opt/Headphones# Configure for start at bootcd /bandito-box/tmpwget https://raw.githubusercontent.com/EZarnosky/Bandito/master/conf/etc_default_headphonestr -d '\r' < /bandito-box/tmp/etc_default_headphones > etc/default/headphones && rm /bandito-box/tmp/etc_default_headphonescp /opt/Headphones/init-scripts/init.ubuntu /etc/init.d/headphones && chmod +x /etc/init.d/headphones# Update the system to Headphones at startupdate-rc.d headphones defaults# Start Headphonesservice headphones start#----> Mylar#http://www.htpcguides.com/install-mylar-raspberry-pi-usenet-torrent-comics/mkdir -p /bandito-box/apps/Mylar#look at /etc/init.d/Mylar for values#MYLAR_OPTS=" --config=/bandito-box/conf/Mylar.conf"#MYLAR_DATA="/bandito-box/apps/Mylar"# Clone Git Repogit clone https://github.com/evilhero/mylar /opt/Mylar# Configure for start at boot# Update the system to Mylar at start#update-rc.d mylar defaults# Start Mylar#service mylar start#----> LazyLibrarian#Clone Git Repogit clone https://github.com/lazylibrarian/LazyLibrarian /opt/LazyLibrarianmkdir -p /bandito-box/apps/LazyLibrarian#look at /etc/init.d/Mylar for values#CONFIG="/bandito-box/conf/LazyLibrarian.conf"#DATADIR="/bandito-box/apps/LazyLibrarian"# Install dependencies# Configure for start at boot# Update the system to LazyLibrarian at start#update-rc.d lazylibrarian defaults# Start LazyLibrarian#service lazylibrarian start#----> HTPC-Manager# Clone Git Repogit clone https://github.com/Hellowlol/HTPC-Manager /opt/HTPCManager# Install dependenciesapt-get install python-setuptools python-cherrypy vnstat smartmontools -y && pip install psutil && apt-get autoremove -y# Configure for start at bootcp /opt/HTPCManager/initd /etc/init.d/htpcmanager && sed -i 's#APP_PATH=/opt/HTPCManager#APP_PATH=/path/to/htpc-manager#g' /etc/init.d/htpcmanager && chmod +x /etc/init.d/htpcmanager# Update the system to Deluge at startupdate-rc.d htpcmanager defaults# Start HTPC-Managerservice htpcmanager start#----> GateOne# Clone Git Repogit clone https://github.com/liftoff/GateOne /opt/GateOne# Install dependencies# Install GateOne package# Configure for start at boot# Update the system to GateOne start# Start GateOne#----> pyLoad# http://pyload.org/configuration# Install dependenciesapt-get install screen -y && apt-get autoremove -y# Install pyLoad packagedpkg -i /bandito-box/.packages/pyLoad/pyload-cli-v0.4.9-all.deb# Configure for start at boot# Update the system to pyLoad at start# Start pyLoad#----> Symbiose#install directions? https://github.com/symbiose/symbiose-raspberrypi#https://github.com/symbiose/symbiose/wiki/Installing-and-configuring-Memcache#http://askubuntu.com/questions/134666/what-is-the-easiest-way-to-enable-php-on-nginx#https://www.raspberrypi.org/documentation/remote-access/web-server/nginx.md#Clone Git Repogit clone https://github.com/symbiose/symbiose /opt/Symbiose# Install dependenciesdpkg -i /bandito-box/.packages/Node/node_latest_armhf.debapt-get install php5-fpm acl -y && apt-get autoremove -y# Installcd /opt/Symbiose npm installnpm run-script buildcd buildln -s /opt/Symbiose/build /usr/share/nginx/www/desktop# chmod file and foldersmkdir -p /usr/share/nginx/www/desktop/homeusrmkdir -p /usr/share/nginx/www/desktop/tmpchmod 0777 /usr/share/nginx/www/desktopchmod 0755 /usr/share/nginx/www/desktop/etcchmod 0755 /usr/share/nginx/www/desktop/homeusrchmod 0755 /usr/share/nginx/www/desktop/tmpchmod 0755 /usr/share/nginx/www/desktop/usrchmod 0755 /usr/share/nginx/www/desktop/var# Set permissions for the nginx webserversetfacl -R -m d:u:www-data:rwX,u:www-data:rwX .# Configure for start at boot# Update the system to Symbiose at start# Start Symbiose